/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ErrorRouteImport } from './routes/error'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedPostRouteImport } from './routes/_authenticated/post'
import { Route as AuthenticatedMyphotosRouteImport } from './routes/_authenticated/myphotos'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ErrorRoute = ErrorRouteImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedPostRoute = AuthenticatedPostRouteImport.update({
  id: '/post',
  path: '/post',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedMyphotosRoute = AuthenticatedMyphotosRouteImport.update({
  id: '/myphotos',
  path: '/myphotos',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/error': typeof ErrorRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/myphotos': typeof AuthenticatedMyphotosRoute
  '/post': typeof AuthenticatedPostRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesByTo {
  '/error': typeof ErrorRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/myphotos': typeof AuthenticatedMyphotosRoute
  '/post': typeof AuthenticatedPostRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/error': typeof ErrorRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_authenticated/myphotos': typeof AuthenticatedMyphotosRoute
  '/_authenticated/post': typeof AuthenticatedPostRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/error'
    | '/login'
    | '/signup'
    | '/myphotos'
    | '/post'
    | '/profile'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/error' | '/login' | '/signup' | '/myphotos' | '/post' | '/profile' | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/error'
    | '/login'
    | '/signup'
    | '/_authenticated/myphotos'
    | '/_authenticated/post'
    | '/_authenticated/profile'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  ErrorRoute: typeof ErrorRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/post': {
      id: '/_authenticated/post'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof AuthenticatedPostRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/myphotos': {
      id: '/_authenticated/myphotos'
      path: '/myphotos'
      fullPath: '/myphotos'
      preLoaderRoute: typeof AuthenticatedMyphotosRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedMyphotosRoute: typeof AuthenticatedMyphotosRoute
  AuthenticatedPostRoute: typeof AuthenticatedPostRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedMyphotosRoute: AuthenticatedMyphotosRoute,
  AuthenticatedPostRoute: AuthenticatedPostRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  ErrorRoute: ErrorRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
